#!/bin/bash
# shellcheck disable=SC2034
########################################################################################
# MIT License                                                                          #
#                                                                                      #
# Copyright (c) Blair Robertson 2017                                                   #
#                                                                                      #
# Permission is hereby granted, free of charge, to any person obtaining a copy         #
# of this software and associated documentation files (the "Software"), to deal        #
# in the Software without restriction, including without limitation the rights         #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell            #
# copies of the Software, and to permit persons to whom the Software is                #
# furnished to do so, subject to the following conditions:                             #
#                                                                                      #
# The above copyright notice and this permission notice shall be included in all       #
# copies or substantial portions of the Software.                                      #
#                                                                                      #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR           #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,             #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE          #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER               #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,        #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE        #
# SOFTWARE.                                                                            #
########################################################################################


set -u

###### DEFAULTS ######
# Default values can be overridden in aem.conf
AEM_JAR=""
AEM_LICENSE=""

AEM_RUNMODES="local"
LOG_FILES=(error.log stdout.log)

AEM_JVM_OPTS="-Xmx1024m -XX:MaxPermSize=256M"

# default these to ENV variables if they exist
JAVA_HOME="${JAVA_HOME:-}"

AEM_INSTANCES=(author publish)   # defines the prefix for following variables

author_MODE="author"
author_HOST="author.local"
author_PORT="4502"

publish_MODE="publish"
publish_HOST="publish.local"
publish_PORT="4503"

###### END DEFAULTS ######


CYGWIN=""
WSL=""
DOTEXE=""
uname=$(uname -a | tr '[:lower:]' '[:upper:]')
if [[ "$uname" == *"CYGWIN"* ]]; then
  CYGWIN="CYGWIN"
elif [[ "$uname" == *"MICROSOFT"* ]]; then
  WSL="WSL"
fi

orig_pwd=$(pwd)
echo "Searching for aem.conf in $(pwd)";
until [ "$(pwd)" == "/" ] || [ -f "aem.conf" ]; do
  cd ../ || exit 1
  echo "Searching for aem.conf in $(pwd)"
done;

echo

if [ ! -f aem.conf ]; then
  echo "No aem.conf found in directory path" >&2

  # exit unless we are running 'conf' operation
  if [[ "$*" != *"conf"* ]]; then
    exit 1
  fi

  # change back to original directory
  cd "$orig_pwd" || exit 1
  echo "BASE DIR : $orig_pwd"

else

  echo "BASE DIR : $(pwd)";
  # shellcheck disable=SC1091
  . aem.conf || exit 1

fi

op=""

debug=""
browser=""

installPackage=""

instances=()

while test ${#} -gt 0
do
  arg=$(echo "$1" | tr '[:upper:]' '[:lower:]' | sed 's!/!!g')
  rawArg="$1"

  if [ "$arg" == "url" ]; then
    arg="urls"
  fi

  case $arg in
  conf|start|stop|clean|unpack|compact|check|jps|logs|urls|testuser|install)
    if [ -n "$op" ]; then
      echo "[ERROR] Only one operation allowed. Already '$op' and now '$arg'" >&2
      exit 1
    fi

    op="$arg"
    ;;
  open)
    declare "browser=browser"
    ;;
  debug|browser)
    declare "$arg=$arg"
    ;;
  all)
    instances=("${AEM_INSTANCES[@]}")
    ;;
  *.zip)
    installPackage="$rawArg"
    ;;
  *)
    for s in "${AEM_INSTANCES[@]}"; do
      if [ "$arg" == "$s" ]; then
        instances=("${instances[@]}" "$arg")
      fi
    done;
    # echo "[WARN] Unknown arg '$arg'" >&2
    ;;
  esac
  shift
done

# if we have no op, but browser is set, then browser is op
# this allows "aem <instance> start browser" and "aem <instance> browser"
if [ -z "$op" ] && [ -n "$browser" ]; then
  op="$browser"
  browser=""
fi

echo "
operation : $op

instances : ${instances[*]}

debug   : $debug
browser : $browser
installPackage : $installPackage
"

if [ -z "$op" ]; then
  echo "[ERROR] No operation specified" >&2
  exit 1
fi;

if [ "$op" != "conf" ] && [ "$op" != "jps" ] && [ "${#instances[@]}" -eq "0" ]; then
  echo "[ERROR] No instances specified" >&2
  exit 1
fi;

if [[ $AEM_JVM_OPTS != *"-Xmx"* ]]; then
  echo "[ERROR] add -Xmx value into AEM_JVM_OPTS" >&2
  exit 1
fi

CQ_DEFAULT_JVM_OPTS="-server -Djava.awt.headless=true $AEM_JVM_OPTS"
CQ_DEBUG_JVM_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1"

function show_create_conf {

  if [ ! -f aem.conf ]; then

    read -rp "Do you want to create an aem.conf? [y/N] " create_file
    if [ "$create_file" != "y" ]; then
      return
    fi

    cat > aem.conf <<zzzENDAEMCONF
AEM_JAR=""
AEM_LICENSE=""

AEM_RUNMODES="local"
LOG_FILES=(error.log stdout.log)

#AEM_JVM_OPTS="-Xmx1024m -XX:MaxPermSize=256M"

#JAVA_HOME=""

AEM_INSTANCES=(author publish)   # defines the prefix for following variables

author_MODE="author"
author_HOST="author.local"
author_PORT="4502"

publish_MODE="publish"
publish_HOST="publish.local"
publish_PORT="4503"
zzzENDAEMCONF

    echo "Created aem.conf"
  fi

  echo "-------------- aem.conf -----------------"
  cat aem.conf
  echo "-----------------------------------------"

}

function _check_aem_prereqs {

  if [ -z "$AEM_JAR" ] || [ ! -f "$AEM_JAR" ]; then
    echo "[ERROR] AEM_JAR '$AEM_JAR' not set correctly" >&2
    exit 1
  fi
  if [[ "$AEM_JAR" != *"sdk"* ]]; then
	if [ -z "$AEM_LICENSE" ] || [ ! -f "$AEM_LICENSE" ]; then
		echo "[ERROR] AEM_LICENSE not set correctly" >&2
		exit 1
	fi
  fi

}

function unpack_aem {

  local instance="$1"

  _check_aem_prereqs

  mkdir -p "$instance"
  pushd "$instance" > /dev/null || return 1
  if [ -d crx-quickstart ]; then
    echo "[ERROR] Unable to unpack AEM $instance - Already crx-quickstart directory" >&2
  else
    java -jar "$AEM_JAR" -unpack
  fi
  popd > /dev/null || return 1

}

function start_aem {

  local instance="$1"

  _check_aem_prereqs

  # variable variables...
  local var_mode="${instance}_MODE"
  local var_port="${instance}_PORT"
  local var_host="${instance}_HOST"

  local mode="${!var_mode}"
  local port="${!var_port}"
  local host="${!var_host}"

  echo "Starting AEM $instance on http://$host:$port/"

  mkdir -p "$instance"
  pushd "$instance" > /dev/null || return 1
  if [ ! -d crx-quickstart ]; then
    java -jar $AEM_JAR -unpack
  fi
  if [ -n "$AEM_LICENSE" ] && [ -f "$AEM_LICENSE" ] && [ ! -f license.properties ]; then
    cp $AEM_LICENSE license.properties
  fi

  export CQ_PORT=${port}
  export CQ_RUNMODE="${mode},${AEM_RUNMODES}"
  if [ -n "$debug" ]; then
    echo ">> DEBUG PORT : 1$CQ_PORT";
    echo ">> JMX   PORT : 2$CQ_PORT";
    CQ_JMX_JVM_OPTS=""
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Dcom.sun.management.jmxremote=true "
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Djava.rmi.server.hostname=127.0.0.1 "
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Dcom.sun.management.jmxremote.port=2$CQ_PORT "
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Dcom.sun.management.jmxremote.ssl=false "
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Dcom.sun.management.jmxremote.registry.ssl=false "
    CQ_JMX_JVM_OPTS="$CQ_JMX_JVM_OPTS -Dcom.sun.management.jmxremote.authenticate=false "

    CQ_JVM_OPTS="$CQ_DEFAULT_JVM_OPTS $CQ_DEBUG_JVM_OPTS$CQ_PORT $CQ_JMX_JVM_OPTS"
  else 
    CQ_JVM_OPTS="$CQ_DEFAULT_JVM_OPTS"
  fi
  export CQ_JVM_OPTS
  ./crx-quickstart/bin/start

  popd > /dev/null || return 1

  echo -e "\n\n\n";

}

function stop_aem {

  local instance="$1"

  echo "Stopping AEM $instance"
  "./$instance/crx-quickstart/bin/stop"

}

function clean_aem {

  local instance="$1"

  echo "Cleaning AEM $instance"
  if [ -d "./$instance/crx-quickstart" ]; then
    rm -r "./$instance/crx-quickstart"
  fi

}

function _check_aem_running {

  local aem_running
  aem_running=$("$JAVA_HOME/bin/jps$DOTEXE" -mlv | grep -c crx-quickstart)
  # echo $aem_running

  if [ "$aem_running" -ne "0" ]; then
    echo "[WARN] AEM instances running" >&2
    run_jps
    echo
    read -rp "Do you really want to continue? [y/N] " force
    if [ "$force" != "y" ]; then
      echo "Aborting";
      exit 1
    fi
    echo "OK, continuing"
  fi;

}

function _get_oak_run {
  local instance="$1"

  if [ ! -d "./$instance/crx-quickstart/repository" ] || [ ! -d "./$instance/crx-quickstart/launchpad" ]; then
    echo "[ERROR] No AEM repository dir found, refusing to continue" >&2
    exit 1
  fi

  echo "Searching for 'oak-core'.." >&2
  echo
  grep -F --color=always -r oak-core "./$instance/crx-quickstart/launchpad" >&2
  echo

  read -rp "Enter the oak-core version (e.g. 1.4.10): " oak_version

  oak_run_dir="$(dirname "$AEM_JAR")/oak-run"

  mkdir -p "$oak_run_dir" || exit 1

  oak_run_jar="oak-run-$oak_version.jar"

  oak_run="$oak_run_dir/$oak_run_jar"

  if [ ! -f "$oak_run" ]; then
    if wget -O "$oak_run" "https://repo1.maven.org/maven2/org/apache/jackrabbit/oak-run/$oak_version/$oak_run_jar"; then
      echo "[ERROR] Downloading oak-run failed" >&2
      rm "$oak_run"
      exit 1;
    fi
  fi

  if command -v cygpath > /dev/null; then
  	oak_run=$(cygpath -wa "$oak_run")
  fi

}

function check_aem {

  local instance="$1"

  _check_aem_running

  echo "Checking Repository for AEM $instance"

  _get_oak_run "$instance"  # sets 'oak_run' variable

  echo "Found '$oak_run'";
  read -rp "Ready to continue : [y/N] " ready

  if [ "$ready" != "y" ]; then
    echo "Aborting" >&2
    return;
  fi

  set -x
  java -jar "$oak_run" check --path "./$instance/crx-quickstart/repository/segmentstore" --deep 60 --bin -1 || exit 1
  set +x

  echo

}


function compact_aem {

  local instance="$1"

  _check_aem_running

  echo "Compacting AEM $instance"

  _get_oak_run "$instance"  # sets 'oak_run' variable

  echo "Found $oak_run";
  read -rp "Ready to continue : [y/N] " ready

  if [ "$ready" != "y" ]; then
    echo "Aborting" >&2
    return;
  fi

  echo "BEFORE SIZE : "
  du -shc "./$instance/crx-quickstart/repository"/*

  set -x
  java -Xmx4g -jar "$oak_run" checkpoints "./$instance/crx-quickstart/repository/segmentstore" || exit 1

  java -Xmx4g -jar "$oak_run" checkpoints "./$instance/crx-quickstart/repository/segmentstore" rm-unreferenced || exit 1

  java -Xmx8g -jar "$oak_run" compact "./$instance/crx-quickstart/repository/segmentstore" || exit 1
  set +x

  echo "AFTER SIZE : "
  du -shc "./$instance/crx-quickstart/repository"/*

  echo

}

function open_logs {

  local log_files=()
  for i in "$@"; do
    for l in "${LOG_FILES[@]}"; do
      log_files=("${log_files[@]}" "$i/crx-quickstart/logs/$l")
    done;
  done;

  ls -al "${log_files[@]}"

  if command -v baretail; then
    baretail "${log_files[@]}" &
  fi


}

function open_browser {

  local start_cmd=""

  if [ -n "$CYGWIN" ]; then
    start_cmd="cygstart"
  elif [ -n "$WSL" ]; then
    start_cmd="wslview"
  fi

  if [ -n "$start_cmd" ]; then

    log_files=()

    local instances=("$@")
    local remaining_instances=()

    local attempts=1

    while [ "${#instances[@]}" -gt 0 ]; do

      remaining_instances=()

      for instance in "${instances[@]}"; do
        # variable variables...
        var_port="${instance}_PORT"
        var_host="${instance}_HOST"

        port="${!var_port}"
        host="${!var_host}"

        echo "Attempt $attempts) Checking AEM $instance on http://$host:$port/"
        local aem_ready
        aem_ready=$(curl -s -i -m 5 -L -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0' "http://$host:$port/libs/granite/core/content/login.html" | grep -F QUICKSTART_HOMEPAGE);
        if [ -n "$aem_ready" ]; then
          echo ">>> Opening AEM $instance"
          $start_cmd "http://$host:$port/crx/de/"
        else
          remaining_instances=("${remaining_instances[@]}" "$instance")
        fi

      done
      instances=("${remaining_instances[@]}")

      if [ "${#instances[@]}" -gt 0 ]; then
        echo "Pausing for 30 seconds before trying again for : ${remaining_instances[*]}"
        sleep 30;
      fi

      ((attempts+=1))

      if [ $attempts -gt 10 ]; then
        echo "Taking to long, aborting...." >&2;
        return;
      fi

    done;

  fi  

}

function show_urls {

  local instances=("$@")

  for instance in "${instances[@]}"; do
    # variable variables...
    var_port="${instance}_PORT"
    var_host="${instance}_HOST"

    port="${!var_port}"
    host="${!var_host}"

    echo "$instance : http://$host:$port/"

  done

}


function run_jps {
  echo "$JAVA_HOME/bin/jps$DOTEXE" -mlv
  "$JAVA_HOME/bin/jps$DOTEXE" -mlv
}

function test_user {

  local instances=("$@")

  read -ei "admin" -rp "Username: " lusername
  read -ei "admin" -rp "Password: " lpassword

  for instance in "${instances[@]}"; do
    # variable variables...
    var_port="${instance}_PORT"
    var_host="${instance}_HOST"

    port="${!var_port}"
    host="${!var_host}"

    echo "$instance : http://$host:$port/"

    set -x
    curl -i -u "$lusername:$lpassword" "http://$host:$port/libs/cq/security/userinfo.json"
    set +x

  done

}

function install_aem_package {

  local instance="$1"
  local pkg="$2"

  # variable variables...
  var_port="${instance}_PORT"
  var_host="${instance}_HOST"

  port="${!var_port}"
  host="${!var_host}"

  echo "$instance : http://$host:$port/"

  local pkgname
  pkgname=$(basename "$pkg")
  set -x
  curl -i -u "admin:admin" -F file="@$pkg" -F name="$pkgname" -F force=true -F install=true "http://$host:$port/crx/packmgr/service.jsp" >> "$instance/package-install.log"
  set +x
}

if [ -z "$JAVA_HOME" ] || [ ! -d "$JAVA_HOME" ]; then
  if [ "$op" != "conf" ]; then
    echo "[ERROR] JAVA_HOME not set correctly : '$JAVA_HOME'" >&2
    exit 1
  else
    echo "[WARN] JAVA_HOME not set correctly : '$JAVA_HOME'" >&2
  fi
fi

if [ -n "$CYGWIN" ]; then
  JAVA_HOME=$(cygpath -u "$JAVA_HOME")
elif [ -n "$WSL" ]; then

  if [ ! -d "$JAVA_HOME" ]; then
    JAVA_HOME=$(wslpath -u "$JAVA_HOME")
  fi

  if [ -f "$JAVA_HOME/bin/java.exe" ]; then
    # If in WSL but calling Windows Java, then need to add .exe to call (not required from Cygwin)
    DOTEXE=".exe"
  fi

fi

export JAVA_HOME

export PATH="$JAVA_HOME/bin:$PATH";

case $op in
conf)
  show_create_conf
  ;;

start)

  for i in "${instances[@]}"; do
    start_aem "$i"
  done;

  echo "Waiting for 5 seconds"
  sleep 5

  open_logs "${instances[@]}"
  run_jps

  if [ -n "$browser" ]; then
    open_browser "${instances[@]}"
  fi

  ;;

stop)

  for i in "${instances[@]}"; do
    stop_aem "$i"
  done;

  run_jps
  ;;

clean)
  for i in "${instances[@]}"; do
    clean_aem "$i"
  done;
  ;;

unpack)
  for i in "${instances[@]}"; do
    unpack_aem "$i"
  done;
  ;;

check)
  for i in "${instances[@]}"; do
    check_aem "$i"
  done;
  ;;

compact)
  for i in "${instances[@]}"; do
    compact_aem "$i"
  done;
  ;;

logs)
  open_logs "${instances[@]}"
  ;;

browser)
  open_browser "${instances[@]}"
  ;;

urls)
  show_urls "${instances[@]}"
  ;;

testuser)
  test_user "${instances[@]}"
  ;;

install)
  for i in "${instances[@]}"; do
    install_aem_package "$i" "$installPackage"
  done;
  ;;

jps)
  run_jps
  ;;
esac
